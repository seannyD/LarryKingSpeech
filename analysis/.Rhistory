}
# Add ending semicolon so that read.newick works
if(substr(tx,nchar(tx),nchar(tx))!=";"){
tx = paste(tx,";",sep='')
}
phy<-read.newick(text=tx)
phy$tip.label = editTipLabels(phy$tip.label,nodeLabelsBy)
phy$node.label = editTipLabels(phy$node.label,nodeLabelsBy)
if(langNodesToTips){
for(nx in phy$node.label[phy$node.label!='']){
phy = setNodeToTip(nx,phy)
}
}
if(dichotomosTree){
phy = multi2di(phy)
}
return(phy)
}
#
phy <- getGlottologTree("atla1278","glottoid")
??multi2di
??read.newick
library(phytools)
library(ape)
#' Convert golottolog tip labels
#'
#' @param X vector of labels.
#' @param nodeLabelsBy How should the node labels be returned?  Glottolog trees have nodes labelled with glottoids, language names and sometimes iso codes. Defaults to "glottoid" for returning glottoids.
#' @return vector of node labels
#' @keywords Glottolog
#' @examples
#' phy$tip.label = editTipLabels(phy$tip.label,"glottoid")
#'
editGlottologTipLabels = function(X, nodeLabelsBy="glottoid"){
item = 2 # glottoid by default
if(is.numeric(nodeLabelsBy)){
item = nodeLabelsBy
} else{
if(nodeLabelsBy=="name"){
item = 1
}
if(noteLabelsBy=="iso"){
item = 3
}
}
X = gsub("\\]","[",X)
return(
sapply(strsplit(X,"\\["),function(z){
if(length(z)>=item){
return(z[item])
} else{
return("")
}
}))
}
bind.tip<-function(tree,tip.label,edge.length=NULL,where=NULL){
if(is.null(where)) where<-length(tree$tip)+1
tip<-list(edge=matrix(c(2,1),1,2),
tip.label=tip.label,
edge.length=edge.length,
Nnode=1)
class(tip)<-"phylo"
obj<-bind.tree(tree,tip,where=where)
return(obj)
}
setNodeToTip = function(nodeName,tree, edge.length=0.001){
bind.tip(tree,nodeName, edge.length,which(tree$node.label==nodeName)[1] + length(tree$tip.label))
}
downloadTree <- function(glottoid){
url = paste("http://glottolog.org/resource/languoid/id/",glottoid,'.newick.txt',sep='')
tx = readLines(url)
return(tx[1])
}
#' Download glottolog trees from the web and convert to phylo objects
#'
#' @param glottoid The glottoid of the family to get (will be downloaded from the web) or local filename.
#' @param nodeLabelsBy How should the node labels be returned?  Glottolog trees have nodes labelled with glottoids, language names and sometimes iso codes. Defaults to "glottoid" for returning glottoids.
#' @param langNodesToTips Some languages in glottolog are not tips on the tree, but nodes with children (e.g. for languages with dialects).  If langNodesToTips is TRUE, the returned tree has extra tips for all nodes with non-blank labels.
#' @return phylo tree
#' @keywords Glottolog
#' @export
#' @examples
#' phy <- getGlottologTree("atla1278","glottoid")
getGlottologTree <- function(glottoid, nodeLabelsBy="glottoid", langNodesToTips=F, dichotomosTree=F){
if(grepl("^[a-z][a-z][a-z][a-z][0-9][0-9][0-9][0-9]$",glottoid)){
tx = downloadTree(glottoid)
} else{
tx = readLines(glottoid)[1]
}
# Add ending semicolon so that read.newick works
if(substr(tx,nchar(tx),nchar(tx))!=";"){
tx = paste(tx,";",sep='')
}
phy<-phytools::read.newick(text=tx)
phy$tip.label = editTipLabels(phy$tip.label,nodeLabelsBy)
phy$node.label = editTipLabels(phy$node.label,nodeLabelsBy)
if(langNodesToTips){
for(nx in phy$node.label[phy$node.label!='']){
phy = setNodeToTip(nx,phy)
}
}
if(dichotomosTree){
phy = ape::multi2di(phy)
}
return(phy)
}
#
phy <- getGlottologTree("atla1278","glottoid")
#' Convert golottolog tip labels
#'
#' @param X vector of labels.
#' @param nodeLabelsBy How should the node labels be returned?  Glottolog trees have nodes labelled with glottoids, language names and sometimes iso codes. Defaults to "glottoid" for returning glottoids.
#' @return vector of node labels
#' @keywords Glottolog
#' @examples
#' phy$tip.label = editGlottologTipLabels(phy$tip.label,"glottoid")
#'
editGlottologTipLabels = function(X, nodeLabelsBy="glottoid"){
item = 2 # glottoid by default
if(is.numeric(nodeLabelsBy)){
item = nodeLabelsBy
} else{
if(nodeLabelsBy=="name"){
item = 1
}
if(noteLabelsBy=="iso"){
item = 3
}
}
X = gsub("\\]","[",X)
return(
sapply(strsplit(X,"\\["),function(z){
if(length(z)>=item){
return(z[item])
} else{
return("")
}
}))
}
bind.tip<-function(tree,tip.label,edge.length=NULL,where=NULL){
if(is.null(where)) where<-length(tree$tip)+1
tip<-list(edge=matrix(c(2,1),1,2),
tip.label=tip.label,
edge.length=edge.length,
Nnode=1)
class(tip)<-"phylo"
obj<-bind.tree(tree,tip,where=where)
return(obj)
}
setNodeToTip = function(nodeName,tree, edge.length=0.001){
bind.tip(tree,nodeName, edge.length,which(tree$node.label==nodeName)[1] + length(tree$tip.label))
}
downloadTree <- function(glottoid){
url = paste("http://glottolog.org/resource/languoid/id/",glottoid,'.newick.txt',sep='')
tx = readLines(url)
return(tx[1])
}
#' Download glottolog trees from the web and convert to phylo objects
#'
#' @param glottoid The glottoid of the family to get (will be downloaded from the web) or local filename.
#' @param nodeLabelsBy How should the node labels be returned?  Glottolog trees have nodes labelled with glottoids, language names and sometimes iso codes. Defaults to "glottoid" for returning glottoids.
#' @param langNodesToTips Some languages in glottolog are not tips on the tree, but nodes with children (e.g. for languages with dialects).  If langNodesToTips is TRUE, the returned tree has extra tips for all nodes with non-blank labels.
#' @return phylo tree
#' @keywords Glottolog
#' @export
#' @examples
#' phy <- getGlottologTree("atla1278","glottoid")
getGlottologTree <- function(glottoid, nodeLabelsBy="glottoid", langNodesToTips=F, dichotomosTree=F){
if(grepl("^[a-z][a-z][a-z][a-z][0-9][0-9][0-9][0-9]$",glottoid)){
tx = downloadTree(glottoid)
} else{
tx = readLines(glottoid)[1]
}
# Add ending semicolon so that read.newick works
if(substr(tx,nchar(tx),nchar(tx))!=";"){
tx = paste(tx,";",sep='')
}
phy<-phytools::read.newick(text=tx)
phy$tip.label = editGlottologTipLabels(phy$tip.label,nodeLabelsBy)
phy$node.label = editGlottologTipLabels(phy$node.label,nodeLabelsBy)
if(langNodesToTips){
for(nx in phy$node.label[phy$node.label!='']){
phy = setNodeToTip(nx,phy)
}
}
if(dichotomosTree){
phy = ape::multi2di(phy)
}
return(phy)
}
#
phy <- getGlottologTree("atla1278","glottoid")
#' Convert golottolog tip labels
#'
#' @param X vector of labels.
#' @param nodeLabelsBy How should the node labels be returned?  Glottolog trees have nodes labelled with glottoids, language names and sometimes iso codes. Defaults to "glottoid" for returning glottoids.
#' @return vector of node labels
#' @keywords Glottolog
#' @examples
#' phy$tip.label = editGlottologTipLabels(phy$tip.label,"glottoid")
#'
editGlottologTipLabels = function(X, nodeLabelsBy="glottoid"){
item = 2 # glottoid by default
if(is.numeric(nodeLabelsBy)){
item = nodeLabelsBy
} else{
if(nodeLabelsBy=="name"){
item = 1
}
if(nodeLabelsBy=="iso"){
item = 3
}
}
X = gsub("\\]","[",X)
return(
sapply(strsplit(X,"\\["),function(z){
if(length(z)>=item){
return(z[item])
} else{
return("")
}
}))
}
bind.tip<-function(tree,tip.label,edge.length=NULL,where=NULL){
if(is.null(where)) where<-length(tree$tip)+1
tip<-list(edge=matrix(c(2,1),1,2),
tip.label=tip.label,
edge.length=edge.length,
Nnode=1)
class(tip)<-"phylo"
obj<-bind.tree(tree,tip,where=where)
return(obj)
}
setNodeToTip = function(nodeName,tree, edge.length=0.001){
bind.tip(tree,nodeName, edge.length,which(tree$node.label==nodeName)[1] + length(tree$tip.label))
}
downloadTree <- function(glottoid){
url = paste("http://glottolog.org/resource/languoid/id/",glottoid,'.newick.txt',sep='')
tx = readLines(url)
return(tx[1])
}
#' Download glottolog trees from the web and convert to phylo objects
#'
#' @param glottoid The glottoid of the family to get (will be downloaded from the web) or local filename.
#' @param nodeLabelsBy How should the node labels be returned?  Glottolog trees have nodes labelled with glottoids, language names and sometimes iso codes. Defaults to "glottoid" for returning glottoids.
#' @param langNodesToTips Some languages in glottolog are not tips on the tree, but nodes with children (e.g. for languages with dialects).  If langNodesToTips is TRUE, the returned tree has extra tips for all nodes with non-blank labels.
#' @return phylo tree
#' @keywords Glottolog
#' @export
#' @examples
#' phy <- getGlottologTree("atla1278","glottoid")
getGlottologTree <- function(glottoid, nodeLabelsBy="glottoid", langNodesToTips=F, dichotomosTree=F){
if(grepl("^[a-z][a-z][a-z][a-z][0-9][0-9][0-9][0-9]$",glottoid)){
tx = downloadTree(glottoid)
} else{
tx = readLines(glottoid)[1]
}
# Add ending semicolon so that read.newick works
if(substr(tx,nchar(tx),nchar(tx))!=";"){
tx = paste(tx,";",sep='')
}
phy<-phytools::read.newick(text=tx)
phy$tip.label = editGlottologTipLabels(phy$tip.label,nodeLabelsBy)
phy$node.label = editGlottologTipLabels(phy$node.label,nodeLabelsBy)
if(langNodesToTips){
for(nx in phy$node.label[phy$node.label!='']){
phy = setNodeToTip(nx,phy)
}
}
if(dichotomosTree){
phy = ape::multi2di(phy)
}
return(phy)
}
#
phy <- getGlottologTree("atla1278","glottoid")
phy
#' Convert golottolog tip labels
#'
#' @param X vector of labels.
#' @param nodeLabelsBy How should the node labels be returned?  Glottolog trees have nodes labelled with glottoids, language names and sometimes iso codes. Defaults to "glottoid" for returning glottoids.
#' @return vector of node labels
#' @keywords Glottolog
#' @examples
#' phy$tip.label = editGlottologTipLabels(phy$tip.label,"glottoid")
#'
editGlottologTipLabels = function(X, nodeLabelsBy="glottoid"){
item = 2 # glottoid by default
if(is.numeric(nodeLabelsBy)){
item = nodeLabelsBy
} else{
if(nodeLabelsBy=="name"){
item = 1
}
if(nodeLabelsBy=="iso"){
item = 3
}
}
X = gsub("\\]","[",X)
return(
sapply(strsplit(X,"\\["),function(z){
if(length(z)>=item){
return(z[item])
} else{
return("")
}
}))
}
bind.tip<-function(tree,tip.label,edge.length=NULL,where=NULL){
if(is.null(where)) where<-length(tree$tip)+1
tip<-list(edge=matrix(c(2,1),1,2),
tip.label=tip.label,
edge.length=edge.length,
Nnode=1)
class(tip)<-"phylo"
obj<-bind.tree(tree,tip,where=where)
return(obj)
}
setNodeToTip = function(nodeName,tree, edge.length=0.001){
bind.tip(tree,nodeName, edge.length,which(tree$node.label==nodeName)[1] + length(tree$tip.label))
}
nodesToTips = function(phy, nodesToFix = phy$node.label[phy$node.label!='']){
for(nx in nodesToFix){
phy = setNodeToTip(nx,phy)
}
return(phy)
}
downloadTree <- function(glottoid){
url = paste("http://glottolog.org/resource/languoid/id/",glottoid,'.newick.txt',sep='')
tx = readLines(url)
return(tx[1])
}
#' Download glottolog trees from the web and convert to phylo objects
#'
#' @param glottoid The glottoid of the family to get (will be downloaded from the web) or local filename.
#' @param nodeLabelsBy How should the node labels be returned?  Glottolog trees have nodes labelled with glottoids, language names and sometimes iso codes. Defaults to "glottoid" for returning glottoids.
#' @param langNodesToTips Some languages in glottolog are not tips on the tree, but nodes with children (e.g. for languages with dialects).  If langNodesToTips is TRUE, the returned tree has extra tips for all nodes with non-blank labels.
#' @return phylo tree
#' @keywords Glottolog
#' @export
#' @examples
#' phy <- getGlottologTree("atla1278","glottoid")
getGlottologTree <- function(glottoid, nodeLabelsBy="glottoid", langNodesToTips=F, dichotomosTree=F){
if(grepl("^[a-z][a-z][a-z][a-z][0-9][0-9][0-9][0-9]$",glottoid)){
tx = downloadTree(glottoid)
} else{
tx = readLines(glottoid)[1]
}
# Add ending semicolon so that read.newick works
if(substr(tx,nchar(tx),nchar(tx))!=";"){
tx = paste(tx,";",sep='')
}
phy<-phytools::read.newick(text=tx)
phy$tip.label = editGlottologTipLabels(phy$tip.label,nodeLabelsBy)
phy$node.label = editGlottologTipLabels(phy$node.label,nodeLabelsBy)
if(langNodesToTips){
phy = nodesToTips(phy)
}
if(dichotomosTree){
phy = ape::multi2di(phy)
}
return(phy)
}
#
phy <- getGlottologTree("atla1278","glottoid")
phy
?readLines
phy <- getGlottologTree("atla1278","glottoid", langNodesToTips = T)
phy
'gola1255' %in% phy$tip.labels
plot(phy)
d = read.csv("~/Downloads/midata8613.csv")
head(d)
d$X.Date
as.Date(d$X.Date)
as.Date(as.character(d$X.Date))
?as.Date(as.character(d$X.Date))
as.Date(as.character(d$X.Date),"%d/%m/%Y")
d$date = as.Date(as.character(d$X.Date),"%d/%m/%Y")
plot(d$Balance,d$date)
plot(d$Balance~d$date)
plot(d$date,d$Balance)
plot(d$date,d$Balance, type = 'line')
head(d)
head(d$Balance)
d$Balance = as.numeric(d$Balance)
d$Balance
d$date = as.Date(as.character(d$X.Date),"%d/%m/%Y")
d$date = as.Date(as.character(d$X.Date),"%d/%m/%Y")
as.numeric(as.character(substring(d$Balance,2))
head(d$Balance)
as.numeric(as.character(substring(d$Balance,2)))
d$date = as.Date(as.character(d$X.Date),"%d/%m/%Y")
head(d$Balance)
d = read.csv("~/Downloads/midata8613.csv")
d$date = as.Date(as.character(d$X.Date),"%d/%m/%Y")
head(d$Balance)
as.numeric(as.character(substring(d$Balance,2)))
substring(d$Balance,2)
?substring(d$Balance,2)
X = head(d$Balance)
X
d$Balance = as.character(d$Balance)
d$Balance
X = head(d$Balance)
substring(X,2)
substring(X,1)
substring(X,4)
substring(X,3)
as.numeric(as.character(substring(d$Balance,3)))
d = read.csv("~/Downloads/midata8613.csv")
d$date = as.Date(as.character(d$X.Date),"%d/%m/%Y")
d$Balance = as.character(d$Balance)
d$Balance = as.numeric(as.character(substring(d$Balance,3)))
plot(d$date,d$Balance, type = 'line')
abline(as.Date(2017-01-01))
abline(v=as.Date(2017-01-01))
abline(h=as.Date(2017-01-01))
as.Date(2017-01-01)
abline(h=as.Date("2017-01-01"))
abline(v=as.Date("2017-01-01"))
abline(v=as.Date("2017-02-01"))
abline(v=as.Date("2017-03-01"))
d
d[45:46,]
factor(10)
factorial(10)
factorial(20)
numberOfSamples = 137
numberOfSamples/2
68 + 68
d = read.csv("~/Documents/MPI/LuisM_K_Pronoun/data/Alldata_simple.csv", stringsAsFactors = F)
head(d)
names(d)
g = read.csv("~/Documents/MPI/Glottolog/glottolog-languoid.csv/languoid.csv",stringsAsFactors = F)
names(g)
g$family = g[match(g$family_pk,g$pk),]$name
head(g$id)
d$family = g[match(d$glotto,g$id),]$family
head(d$family)
table(d$family)
d2 = d[d$family=="Uto-Aztecan",]
table(d2$meaning.id)
table(d2$Language)
d = read.delim("~/Documents/MPI/LuisM_K_Pronoun/BEAST_analysis/models/2017/relaxedClock_excludeSmall/relaxedClock_resampled.log",sep="\t", skip = 790, nrows = 10)
head(d)
plot(d$posterior)
d = read.delim("~/Documents/MPI/LuisM_K_Pronoun/BEAST_analysis/models/2017/relaxedClock_excludeSmall/relaxedClock_resampled.log",sep="\t", skip = 790, nrows = 20000)
plot(d$posterior)
plot(log(d$posterior))
plot(log(absd$posterior))
plot(log(abs(d$posterior)))
plot((d$posterior))
plot((d$posterior[3:nrow(d)]))
library(gplots)
library(ggplot2)
library(lubridate)
library(mgcv)
#######
ggplot_dual_axis <- function(lhs, rhs, axis.title.y.rhs = "rotate") {
# 1. Fix the right y-axis label justification
rhs <- rhs + theme(axis.text.y = element_text(hjust = 0))
# 2. Rotate the right y-axis label by 270 degrees by default
if (missing(axis.title.y.rhs) |
axis.title.y.rhs %in% c("rotate", "rotated")) {
rhs <- rhs + theme(axis.title.y = element_text(angle = 270))
}
# 3a. Use only major grid lines for the left axis
lhs <- lhs + theme(panel.grid.minor = element_blank())
# 3b. Use only major grid lines for the right axis
#     force transparency of the backgrounds to allow grid lines to show
rhs <- rhs + theme(panel.grid.minor = element_blank(),
panel.background = element_rect(fill = "transparent", colour = NA),
plot.background = element_rect(fill = "transparent", colour = NA))
# Process gtable objects
# 4. Extract gtable
library("gtable") # loads the grid package
g1 <- ggplot_gtable(ggplot_build(lhs))
g2 <- ggplot_gtable(ggplot_build(rhs))
# 5. Overlap the panel of the rhs plot on that of the lhs plot
pp <- c(subset(g1$layout, name == "panel", se = t:r))
g <- gtable_add_grob(g1,
g2$grobs[[which(g2$layout$name == "panel")]], pp$t, pp$l, pp$b, pp$l)
# Tweak axis position and labels
ia <- which(g2$layout$name == "axis-l")
ga <- g2$grobs[[ia]]
ax <- ga$children[["axis"]]  # ga$children[[2]]
ax$widths <- rev(ax$widths)
ax$grobs <- rev(ax$grobs)
ax$grobs[[1]]$x <- ax$grobs[[1]]$x - unit(1, "npc") + unit(0.15, "cm")
g <- gtable_add_cols(g, g2$widths[g2$layout[ia, ]$l], length(g$widths) - 1)
g <- gtable_add_grob(g, ax, pp$t, length(g$widths) - 1, pp$b)
g <- gtable_add_grob(g, g2$grobs[[7]], pp$t, length(g$widths), pp$b)
# add legend on top
if ("guide-box" %in% g1$layout$name){
dimGB1 <- c(subset(g1$layout, name == "guide-box", se = t:r))
g <- gtable_add_grob(g,
g1$grobs[[which(g1$layout$name == "guide-box")]],
dimGB1$t, dimGB1$l, dimGB1$b, dimGB1$l, z=-Inf)
}
# Display plot with arrangeGrob wrapper arrangeGrob(g)
library("gridExtra")
grid.newpage()
return(arrangeGrob(g))
}
######
setwd("~/Documents/MPI/ClimateAndLanguage/LarryKing/analysis/")
d = read.csv("../data/King_segmentsByDate.csv")
d$vowelIndex = (d$v / (d$v+d$consonants))
plot(diff(d$vowelIndex), diff(d$humidity))
cor.tet(diff(d$vowelIndex), diff(d$humidity))
cor.test(diff(d$vowelIndex), diff(d$humidity))
